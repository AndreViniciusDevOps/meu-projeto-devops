# Nome do nosso workflow
name: Deploy do Site NGINX na EC2 (Estratégia Local Build)

# Gatilho: Roda a cada push na branch 'main'
on:
  push:
    branches: [ "main" ]

# Define os trabalhos (jobs)
jobs:
  deploy-on-ec2:
    name: Implantar na EC2
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Fazer o checkout do código na máquina do GitHub Actions
    # Precisamos disso para saber que arquivos enviar.
    - name: Checkout do código
      uses: actions/checkout@v4

    # Passo 2: Copiar os arquivos do projeto para a EC2 via SCP
    # Em vez de enviar uma imagem, enviamos os arquivos de origem.
    - name: Copiar arquivos para a EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "app,Dockerfile" # Arquivos e pastas a serem copiados, separados por vírgula
        target: "/home/ec2-user/meu-app" # Pasta de destino na EC2

    # Passo 3: Conectar na EC2 via SSH e executar os comandos de build e run
    - name: Construir e rodar o contêiner na EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Navega para a pasta onde copiamos os arquivos
          cd /home/ec2-user/meu-app

          # Instala o Docker se não estiver presente
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          sudo usermod -a -G docker ${{ secrets.EC2_USERNAME }}

          # Constrói a imagem Docker a partir do Dockerfile LOCALMENTE na EC2
          docker build -t meu-site-local .

          # Para e remove o contêiner antigo, se existir
          docker stop nginx-server || true
          docker rm nginx-server || true

          # Inicia um novo contêiner a partir da imagem que acabamos de construir localmente
          docker run -d --name nginx-server -p 80:80 meu-site-local